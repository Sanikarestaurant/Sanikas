AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to launch an EC2 t3.medium Ubuntu in existing VPC with 30GB, Security Group for SSH/HTTP/HTTPS, and an S3 bucket'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID for deployment'
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: 'Subnet ID for deployment'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Key pair name for EC2 access'
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: 'ami-0ccbdfb001aa307a1'
    Description: 'Ubuntu AMI ID for your region'
Resources:
  # Security Group for EC2 Instance
  SanikaSgCombined:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Sanikas_SG for SSH, HTTP, and HTTPS"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: "SSH access"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "HTTP access"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "HTTPS access"
      Tags:
        - Key: Name
          Value: sanikasrestaurant-SG-SSH-HTTP-HTTPS

  # EC2 Instance
  SanikaInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref SanikaSgCombined
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            Encrypted: true
      Tags:
        - Key: Name
          Value: sanikasrestaurant

  # S3 Bucket
  SanikasRestaurantBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sanikasrestaurant-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: sanikasrestaurant-storage
        - Key: Environment
          Value: production

  # IAM Role for EC2 to access S3 (optional but recommended)
  EC2S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'sanikasrestaurant-ec2-s3-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${SanikasRestaurantBucket}/*'
                  - !Ref SanikasRestaurantBucket
      Tags:
        - Key: Name
          Value: sanikasrestaurant-ec2-s3-access

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'sanikasrestaurant-instance-profile-${AWS::Region}'
      Roles:
        - !Ref EC2S3AccessRole

# Outputs section to display important information
Outputs:
  InstanceId:
    Description: 'EC2 Instance ID'
    Value: !Ref SanikaInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  
  InstancePublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !GetAtt SanikaInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'
  
  S3BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref SanikasRestaurantBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  
  S3BucketArn:
    Description: 'ARN of the created S3 bucket'
    Value: !GetAtt SanikasRestaurantBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'
